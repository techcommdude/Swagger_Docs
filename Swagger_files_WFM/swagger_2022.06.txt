{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Infor Workforce Management Public API",
    "version" : "1"
  },
  "servers" : [ {
    "url" : "/services/api"
  } ],
  "security" : [ {
    "OAuthToken" : [ ]
  } ],
  "paths" : {
    "/services/api/public/v1/clocks/accepted-swipes" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Gets accepted swipes",
        "description" : "Gets accepted swipes. Swipes are ordered in descending order of swipe ids",
        "operationId" : "getLastAcceptedTransactions",
        "parameters" : [ {
          "name" : "employee-name",
          "in" : "query",
          "description" : "Name of the employee. If this is missing swipes for all employees will be returned",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "swipe-type",
          "in" : "query",
          "description" : "Array of swipe types as described in SwipeDto. If this is missing or empty all swipe types will be returned",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor obtained from previous request to this API. If this is missing returns all swipes from the start.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of swipes to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithSwipeDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No swipes found because employee does not exist or swipes do not exist for the employee"
          }
        }
      },
      "post" : {
        "tags" : [ "clocks" ],
        "summary" : "Create an accepted swipe",
        "operationId" : "submit_accepted_swipe",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SwipeDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Added"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/biodata" : {
      "post" : {
        "tags" : [ "clocks" ],
        "summary" : "Saves biodata",
        "description" : "Inserts or updates biodata.If a biodata record exists with the employee id, finger number and reader type it is updated with template and quality. Otherwise a new record is created.",
        "operationId" : "saveBiodata",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BiodataDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Biodata Added"
          },
          "400" : {
            "description" : "Missing required fields"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/biodata/{id}" : {
      "delete" : {
        "tags" : [ "clocks" ],
        "summary" : "Deletes a biodata",
        "description" : "Deletes biodata. Return not found if no biodata exists with the id",
        "operationId" : "deleteBiodata",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Biodata deleted"
          },
          "404" : {
            "description" : "Biodata not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/change-of-reader-states" : {
      "post" : {
        "tags" : [ "clocks" ],
        "summary" : "Accepts changes to the state of multiple readers",
        "description" : "Records changes to the state of multiple readers",
        "operationId" : "acceptReaderStateChange",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReaderStateChangeDto"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Changes are accepted, States may or may not be updated right away"
          },
          "400" : {
            "description" : "Bad Request. One or more invalid states included in a request or the number of state changes reported in greater than 500"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/reader-groups/{group-name}" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Gets a reader group by its name",
        "description" : "API to get a reader group by its name",
        "operationId" : "getReaderGroupByName",
        "parameters" : [ {
          "name" : "group-name",
          "in" : "path",
          "description" : "Name of the reader group",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReaderGroupDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Reader group with the name is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds a reader by its name",
        "operationId" : "getReader",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReaderDto"
                }
              }
            }
          },
          "404" : {
            "description" : "No reader with the name is found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/biodata" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds biodata for a reader",
        "description" : "Returns biodata for employees that can use the reader",
        "operationId" : "getBiodataByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of biodata to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithBiodataDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Biodata are not found"
          },
          "404" : {
            "description" : "Reader is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/config" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds the current reader configuration",
        "description" : "Finds the current configuration of a reader.",
        "operationId" : "getCurrentReaderConfiguration",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReaderConfigDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No reader configuration is found"
          },
          "404" : {
            "description" : "No reader with the name is found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/department-group-assignments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds department group assignments for a reader.",
        "description" : "Returns group assignments for departments that can use the reader.",
        "operationId" : "getDepartmentReaderGroupsByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of department reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithDepartmentReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No department reader groups found."
          },
          "404" : {
            "description" : "Reader is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/departments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds departments usable at a reader",
        "description" : "Finds departments that are assigned to the reader group to which the reader belongs",
        "operationId" : "getDepartmentsForReader",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of departments to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithDepartmentDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No departments found"
          },
          "404" : {
            "description" : "No reader with the name is found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/docket-group-assignments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds docket group assignments for a reader.",
        "description" : "Returns group assignments for dockets that can use the reader.",
        "operationId" : "getDocketReaderGroupsByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of docket reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithDocketReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No docket reader groups found."
          },
          "404" : {
            "description" : "Reader is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/dockets" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds dockets usable at a reader",
        "description" : "Finds dockets that are assigned to the reader group to which the reader belongs",
        "operationId" : "getDocketsForReader",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of dockets to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithDocketDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No dockets found"
          },
          "404" : {
            "description" : "No reader with the name is found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/employee-jobs" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all job assignments by reader name",
        "description" : "Returns employee job assignments for employees belonging to the reader group of a reader",
        "operationId" : "getEmployeeJobsByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Used to filter job assignments that are active on the date",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of employee jobs assignments to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithEmployeeJobDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Employee job assignments are not found"
          },
          "400" : {
            "description" : "Date is required"
          },
          "404" : {
            "description" : "Reader is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/employee-reader-groups" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds employee group assignments for a reader.",
        "description" : "Returns group assignments for employees that can use the reader.",
        "operationId" : "getEmployeeReaderGroupsByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of employee reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithEmployeeReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No employee reader groups found."
          },
          "404" : {
            "description" : "Reader is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/employees" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all employees who have access to a clock",
        "description" : "Finds employees who are assigned to the reader group to which the reader belongs. Optionally filter the employees with badge numbers containing a specific value. It is possible to have more than one employee returned even with full badge when two employees exist such that first employee'sbadge number ('123') is  a subset of second employee's badge ('1234'). Clients must search through the result to find the employee with the exact match for the badge",
        "operationId" : "getEmployeesByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "partial-badge",
          "in" : "query",
          "description" : "partial badge number",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of employees to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithClockEmployeeDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No employees found"
          },
          "404" : {
            "description" : "No reader with the name is found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/employees/{employee-name}/biodata" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds biodata for a an employee for a reader",
        "description" : "Returns biodata for an employee that can use the reader",
        "operationId" : "getBiodataByReaderAndEmployeeName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Name of the employee",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of biodata to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithClockEmployeeScheduleDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Biodata are not found"
          },
          "404" : {
            "description" : "Reader or employee is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/employees/{employee-name}/employee-jobs" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all job assignments by employee name and reader name",
        "description" : "Returns employee job assignments for a specific employee who is assigned to the reader group of a reader",
        "operationId" : "getEmployeeJobsByReaderAndEmployeeName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Reader name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Employee Name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Used to filter job assignments that are active on the date",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of employee job assignments to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithEmployeeJobDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Employee job assignments are not found"
          },
          "400" : {
            "description" : "Date is required"
          },
          "404" : {
            "description" : "Reader or employee is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/employees/{employee-name}/schedules" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all schedules by reader name and employee name",
        "description" : "Returns employee schedules for a specific employee who is assigned to the reader group of a reader based on the given start/end date",
        "operationId" : "getEmployeeSchedulesByReaderAndEmployeeName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Name of the employee",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Start date of the date range",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "End date of the date range",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of employee schedules to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithClockEmployeeScheduleDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Employee schedules are not found"
          },
          "400" : {
            "description" : "Both startDate and endDate are required and ensure endDate not earlier than startDate"
          },
          "404" : {
            "description" : "Reader or employee is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/job-group-assignments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds job group assignments for a reader.",
        "description" : "Returns group assignments for jobs that can use the reader.",
        "operationId" : "getJobReaderGroupsByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of job reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithJobReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No job reader groups found."
          },
          "404" : {
            "description" : "Reader is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/jobs" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all jobs usable at a clock",
        "description" : "Finds jobs that are assigned to the reader group to which the reader belongs",
        "operationId" : "getJobsForReader",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of jobs to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithJobDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No jobs found"
          },
          "404" : {
            "description" : "No reader with the name is found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/project-group-assignments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds project group assignments for a reader.",
        "description" : "Returns group assignments for projects that can use the reader.",
        "operationId" : "getProjectReaderGroupsByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of project reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithProjectReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No project reader groups found."
          },
          "404" : {
            "description" : "Reader is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/projects" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds projects usable at a reader",
        "description" : "Finds projects that are assigned to the reader group to which the reader belongs",
        "operationId" : "getProjectsForReader",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of projects to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithProjectDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No projects found"
          },
          "404" : {
            "description" : "No reader with the name is found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/scheduled-swipes" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all scheduled swipes belonging to the employees who are assigned to the reader group of a reader.",
        "description" : "Returns all scheduled swipes belonging to the employees who are assigned to the reader group of a reader and have scheduled swipes between the from and to times inclusive.",
        "operationId" : "getScheduledSwipesByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "updateTimeFrom",
          "in" : "query",
          "description" : "An UTC date time that is used to filter employee swipes based on the scheduled swipes update time",
          "schema" : {
            "$ref" : "#/components/schemas/WbInstant"
          }
        }, {
          "name" : "updateTimeTo",
          "in" : "query",
          "description" : "An UTC date time that is used to filter employee swipes based on the scheduled swipes update time",
          "schema" : {
            "$ref" : "#/components/schemas/WbInstant"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. The cursor is obtained from the previous call to this API",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of scheduled swipes to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithScheduledSwipeDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Scheduled swipes are not found"
          },
          "400" : {
            "description" : "Bad request. These are the possible causes <li>updateTimeFrom is null or invalid</li><li>updateTimeTo is null or invalid</li><li>updateTimeTo is earlier than updateTimeFrom</li>"
          },
          "404" : {
            "description" : "Reader is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/schedules" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all schedules belonging to the employees who are assigned to the reader group of a reader",
        "description" : "Returns all schedules belonging to the employees who are assigned to the reader group of a reader based on the given start/end date",
        "operationId" : "getEmployeeSchedulesByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Start date of the date range",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "End date of the date range",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of employee schedules to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithClockEmployeeScheduleDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Employee schedules are not found"
          },
          "400" : {
            "description" : "Both startDate and endDate are required and ensure endDate not earlier than startDate"
          },
          "404" : {
            "description" : "Reader is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/time-approvals" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "API that finds time approvals for a reader.",
        "description" : "This API returns time approvals for employees that can use the reader.",
        "operationId" : "getTimeApprovalsByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "processedTimeApprovals",
          "in" : "query",
          "description" : "Specify the category of the time approvals to be returned. When the specified value is true, time approvals with APPROVED, REJECTED and RESOLVED states will be included in the response; otherwise, time approvals with CREATED, PENDING, SHOWN states will be included.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "processedTimeFrom",
          "in" : "query",
          "description" : "Start of the given time period in UTC time to filter time approvals by processed time. It can not be null.",
          "schema" : {
            "$ref" : "#/components/schemas/WbInstant"
          }
        }, {
          "name" : "processedTimeTo",
          "in" : "query",
          "description" : "End of the given time period in UTC time used to filter the time approvals by processed time. Specify a value after the processedTimeFrom.",
          "schema" : {
            "$ref" : "#/components/schemas/WbInstant"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of time approvals to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithTimeApprovalDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No time approval found."
          },
          "400" : {
            "description" : "Bad request. These are the possible causes <li> processedTimeFrom is null or invalid</li><li> processedTimeTo is null or invalid </li><li>processedTimeTo is earlier than processedTimeFrom</li>."
          },
          "403" : {
            "description" : "Time approval is disabled."
          },
          "404" : {
            "description" : "No reader with the name found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/time-code-group-assignments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds time code group assignments for a reader.",
        "description" : "Returns group assignments for time codes that can use the reader.",
        "operationId" : "getTimeCodeReaderGroupsByReaderName",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "Name of the reader.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of time code reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithTimeCodeReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No time code reader groups found."
          },
          "404" : {
            "description" : "Reader is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/readers/{reader-name}/time-codes" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all time codes usable at a clock",
        "description" : "Finds time codes that are assigned to the reader group to which the reader belongs",
        "operationId" : "getTimeCodesForReader",
        "parameters" : [ {
          "name" : "reader-name",
          "in" : "path",
          "description" : "name of the reader",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of time codes to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithTimeCodeDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No time codes found"
          },
          "404" : {
            "description" : "No reader with the name is found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/rejected-swipes" : {
      "post" : {
        "tags" : [ "clocks" ],
        "summary" : "Creates a rejected swipe",
        "operationId" : "submit_rejected_swipe",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectedSwipeDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Added"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/biodata" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds biodata for a reader server",
        "description" : "Returns biodata for employees that can use at least one reader served by a reader server",
        "operationId" : "getBiodataByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of biodata to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithBiodataDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Employee biodata are not found"
          },
          "404" : {
            "description" : "Reader server is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/department-group-assignments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds department group assignments for a reader server.",
        "description" : "Returns group assignments for departments that can use at least one reader served by a reader server.",
        "operationId" : "getDepartmentReaderGroupsByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of department reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithDepartmentReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No department reader groups found."
          },
          "404" : {
            "description" : "Reader server is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/departments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all departments usable at readers connecting to reader server",
        "description" : "Finds departments that are assigned to reader groups that are associated with a reader server",
        "operationId" : "getDepartmentsForReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of departments to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithDepartmentDto"
                }
              }
            }
          },
          "204" : {
            "description" : "NO DEPARTMENTS FOUND"
          },
          "404" : {
            "description" : "NO READER SERVER WITH THE NAME IS FOUND"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/docket-group-assignments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds docket group assignments for a reader server.",
        "description" : "Returns group assignments for dockets that can use at least one reader served by a reader server.",
        "operationId" : "getDocketReaderGroupsByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of docket reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithDocketReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No docket reader groups found."
          },
          "404" : {
            "description" : "Reader server is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/dockets" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all dockets usable at readers connecting to reader server",
        "description" : "Finds dockets that are assigned to reader groups that are associated with a reader server",
        "operationId" : "getDocketsForReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of dockets to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithDocketDto"
                }
              }
            }
          },
          "204" : {
            "description" : "NO DOCKETS FOUND"
          },
          "404" : {
            "description" : "NO READER SERVER WITH THE NAME IS FOUND"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/employee-jobs" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all job assignments of employees belonging to the reader groups of the server",
        "description" : "Returns job assignments of employees belonging to the associated reader groups of a reader server active on the date",
        "operationId" : "getEmployeeJobsByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Reader server name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Used to filter job assignments that are active on the date",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of employee jobs assignments to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithEmployeeJobDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Employee job assignments are not found"
          },
          "400" : {
            "description" : "Date is required"
          },
          "404" : {
            "description" : "Reader server is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/employee-reader-groups" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds employee group assignments for a reader server.",
        "description" : "Returns group assignments for employees that can use at least one reader served by a reader server.",
        "operationId" : "getEmployeeReaderGroupsByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of employee reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithEmployeeReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No employee reader groups found."
          },
          "404" : {
            "description" : "Reader server is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/employees" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all employees who have access to at least one of the clocks supported by a clock server",
        "description" : "Finds employees who are assigned to any of the reader groups that are associated with a clock server",
        "operationId" : "getEmployeesByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "cursor returned as part of response to previous request for employees",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of employees to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithClockEmployeeDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No EMPLOYEES FOUND"
          },
          "404" : {
            "description" : "NO SERVER WITH THE NAME IS FOUND"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/employees/{employee-name}/biodata" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds biodata for a an employee for a reader server",
        "description" : "Returns biodata for an employee that can use at least one reader served by a reader server",
        "operationId" : "getBiodataByReaderServerAndEmployeeName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Name of the employee",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of biodata to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithClockEmployeeScheduleDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Biodata are not found"
          },
          "404" : {
            "description" : "Reader server or employee is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/employees/{employee-name}/employee-jobs" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all job assignments by employee name and reader server name",
        "description" : "Returns employee job assignments for a specific employee who is assigned to the associated reader groups of a reader server",
        "operationId" : "getEmployeeJobsByReaderServerAndEmployeeName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Reader server name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Employee name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Used to filter job assignments that are active on the date",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of employee job assignments to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithEmployeeJobDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Employee job assignments are not found"
          },
          "400" : {
            "description" : "Date is required"
          },
          "404" : {
            "description" : "Reader server or employee is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/employees/{employee-name}/schedules" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all schedules by employee name and reader server name",
        "description" : "Returns employee schedules for a specific employee who is assigned to the associated reader groups of a reader server based on the given start/end date",
        "operationId" : "getEmployeeSchedulesByReaderServerAndEmployeeName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Name of the employee",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Start date of the date range",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "End date of the date range",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of employee schedules to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithClockEmployeeScheduleDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Employee schedules are not found"
          },
          "400" : {
            "description" : "Both startDate and endDate are required and ensure endDate not earlier than startDate"
          },
          "404" : {
            "description" : "Reader server or employee is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/job-group-assignments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds job group assignments for a reader server.",
        "description" : "Returns group assignments for jobs that can use at least one reader served by a reader server.",
        "operationId" : "getJobReaderGroupsByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of job reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithJobReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No job reader groups found."
          },
          "404" : {
            "description" : "Reader server is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/jobs" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all jobs usable at clocks connecting to clock server",
        "description" : "Finds jobs that are assigned to reader groups that are associated with a clock server",
        "operationId" : "getJobsForReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of jobs to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithJobDto"
                }
              }
            }
          },
          "204" : {
            "description" : "NO JOBS FOUND"
          },
          "404" : {
            "description" : "NO READER SERVER WITH THE NAME IS FOUND"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/project-group-assignments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds project group assignments for a reader server.",
        "description" : "Returns group assignments for projects that can use at least one reader served by a reader server.",
        "operationId" : "getProjectReaderGroupsByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of project reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithProjectReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No project reader groups found."
          },
          "404" : {
            "description" : "Reader server is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/projects" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all projects usable at readers connecting to reader server",
        "description" : "Finds projects that are assigned to reader groups that are associated with a reader server",
        "operationId" : "getProjectsForReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of projects to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithProjectDto"
                }
              }
            }
          },
          "204" : {
            "description" : "NO DOCKETS FOUND"
          },
          "404" : {
            "description" : "NO READER SERVER WITH THE NAME IS FOUND"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/reader-groups" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Gets all reader groups whose readers are served by a reader server.",
        "description" : "Finds reader groups served by a reader server.",
        "operationId" : "getReaderGroupsByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No reader groups found."
          },
          "404" : {
            "description" : "Reader server is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/readers" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all readers supported by a reader server",
        "description" : "Returns all readers assigned to reader groups which are configured to use the reader server",
        "operationId" : "getReadersByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "reader server name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of readers to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithReaderDto"
                }
              }
            }
          },
          "204" : {
            "description" : "NO READERS FOUND"
          },
          "404" : {
            "description" : "NO SERVER WITH THE NAME IS FOUND"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/scheduled-swipes" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all scheduled swipes belonging to the employees who are assigned and associated to the reader groups of the reader server.",
        "description" : "Returns all scheduled swipes belonging to the employees who are assigned and associated to the reader groups of the reader server and have scheduled swipes between the from and to times inclusive.",
        "operationId" : "getScheduledSwipesByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "updateTimeFrom",
          "in" : "query",
          "description" : "An UTC date time that is used to filter scheduled swipes based on the scheduled swipes update time",
          "schema" : {
            "$ref" : "#/components/schemas/WbInstant"
          }
        }, {
          "name" : "updateTimeTo",
          "in" : "query",
          "description" : "An UTC date time that is used to filter scheduled swipes based on the scheduled swipes update time",
          "schema" : {
            "$ref" : "#/components/schemas/WbInstant"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. The cursor is obtained from the previous call to this API",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of scheduled swipes to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithScheduledSwipeDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Scheduled swipes are not found"
          },
          "400" : {
            "description" : "Bad request. These are the possible causes <li>updateTimeFrom is null or invalid</li><li>updateTimeTo is null or invalid</li><li>updateTimeTo is earlier than updateTimeFrom</li>"
          },
          "404" : {
            "description" : "Reader server is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/schedules" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds schedules belonging to the employees who are assigned to reader groups associated with a reader server",
        "description" : "Returns schedules belonging to the employees who are assigned to reader groups associated with a reader server based on the given start/end date",
        "operationId" : "getEmployeeSchedulesByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Start date of the date range",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "End date of the date range",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of employee schedules to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithClockEmployeeScheduleDto"
                }
              }
            }
          },
          "204" : {
            "description" : "Employee schedules are not found"
          },
          "400" : {
            "description" : "Both startDate and endDate are required and ensure endDate not earlier than startDate"
          },
          "404" : {
            "description" : "Reader server or employee is not found"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/time-approvals" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "API that finds time approvals for a reader server.",
        "description" : "This API returns time approvals for employees that use at least one reader served by a reader server.",
        "operationId" : "getTimeApprovalsByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "processedTimeApprovals",
          "in" : "query",
          "description" : "Specify the category of the time approvals to be returned. When the specified value is true, time approvals with APPROVED, REJECTED and RESOLVED states will be included in the response; otherwise, time approvals with CREATED, PENDING, SHOWN states will be included.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "processedTimeFrom",
          "in" : "query",
          "description" : "Start of the given time period in UTC time to filter time approvals by processed time. It can not be null.",
          "schema" : {
            "$ref" : "#/components/schemas/WbInstant"
          }
        }, {
          "name" : "processedTimeTo",
          "in" : "query",
          "description" : "End of the given time period in UTC time used to filter the time approvals by processed time. Specify a value after the processedTimeFrom.",
          "schema" : {
            "$ref" : "#/components/schemas/WbInstant"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of time approvals to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithTimeApprovalDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No time approvals are found."
          },
          "400" : {
            "description" : "Bad request. These are the possible causes <li> processedTimeFrom is null or invalid</li><li> processedTimeTo is null or invalid </li><li>processedTimeTo is earlier than processedTimeFrom</li>."
          },
          "403" : {
            "description" : "Time approval is disabled."
          },
          "404" : {
            "description" : "No reader with the name is found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/time-code-group-assignments" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds time code group assignments for a reader server.",
        "description" : "Returns group assignments for time codes that can use at least one reader served by a reader server.",
        "operationId" : "getTimeCodeReaderGroupsByReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "Name of the reader server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor to be used in this search. It is obtained from the previous call to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of time code reader groups to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithTimeCodeReaderGroupDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No time code reader groups found."
          },
          "404" : {
            "description" : "Reader server is not found."
          }
        }
      }
    },
    "/services/api/public/v1/clocks/servers/{server-name}/time-codes" : {
      "get" : {
        "tags" : [ "clocks" ],
        "summary" : "Finds all time codes usable at clocks connecting to  clock server",
        "description" : "Finds time codes that are assigned to reader groups that are associated with a clock server",
        "operationId" : "getTimeCodesForReaderServerName",
        "parameters" : [ {
          "name" : "server-name",
          "in" : "path",
          "description" : "name of the reader server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "identifies where search starts",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of time codes to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithTimeCodeDto"
                }
              }
            }
          },
          "204" : {
            "description" : "NO TIME CODES FOUND"
          },
          "404" : {
            "description" : "NO READER SERVER WITH THE NAME IS FOUND"
          }
        }
      }
    },
    "/services/api/public/v1/clocks/time-approvals/{id}/states" : {
      "post" : {
        "tags" : [ "clocks" ],
        "summary" : "API that submits state change of a time approval.",
        "description" : "This API accepts change to time approval processing state.",
        "operationId" : "updateTimeApprovalState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of time approval.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimeApprovalStateChangeDto"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Change is accepted. State may not be updated immediately."
          },
          "400" : {
            "description" : "Bad request. One or more fields of the posted dto are invalid."
          },
          "403" : {
            "description" : "Time approval is disabled."
          },
          "404" : {
            "description" : "No time approval with the given ID found."
          }
        }
      }
    },
    "/services/api/public/v1/common/current-user" : {
      "get" : {
        "tags" : [ "Current User" ],
        "summary" : "Get current user name and employee name",
        "operationId" : "getCurrentUser",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CurrentUserDto"
                }
              }
            }
          }
        }
      }
    },
    "/services/api/public/v1/common/custom-data-type" : {
      "get" : {
        "tags" : [ "Custom Data Type" ],
        "summary" : "Get all custom data type",
        "description" : "Get all custom data type",
        "operationId" : "getCustomDataTypesWithRange",
        "parameters" : [ {
          "name" : "cursor",
          "in" : "query",
          "description" : "Cursor to support pagination. Expected to be either null meaning from the start or the value of nextCursor from the response to a previous request",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of custom  data type to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedCustomDataTypeDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Custom data type not found"
          }
        }
      }
    },
    "/services/api/public/v1/common/custom-data-type/{custom-data-type-id}/custom-data" : {
      "post" : {
        "tags" : [ "Custom Data" ],
        "summary" : "Insert new custom data for the specified type",
        "description" : "Insert new custom data for the specified type",
        "operationId" : "insertCustomData",
        "parameters" : [ {
          "name" : "custom-data-type-id",
          "in" : "path",
          "description" : "Custom Data Type Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomDataDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Added"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/services/api/public/v1/common/custom-data-type/{custom-data-type-id}/custom-data/{custom-data-id}" : {
      "get" : {
        "tags" : [ "Custom Data" ],
        "summary" : "Get custom data by typeId and id",
        "description" : "Get custom data by typeId and id",
        "operationId" : "getCustomDataById",
        "parameters" : [ {
          "name" : "custom-data-type-id",
          "in" : "path",
          "description" : "Custom Data Type Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "custom-data-id",
          "in" : "path",
          "description" : "Custom Data Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomDataTypeDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Custom data not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Custom Data" ],
        "summary" : "Update existed custom data for the specified type",
        "description" : "Update existed custom data for the specified type",
        "operationId" : "updateCustomData",
        "parameters" : [ {
          "name" : "custom-data-type-id",
          "in" : "path",
          "description" : "Custom Data Type Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "custom-data-id",
          "in" : "path",
          "description" : "Custom Data Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomDataDto"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Resource updated"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/services/api/public/v1/common/custom-data-type/{custom-data-type-name}" : {
      "get" : {
        "tags" : [ "Custom Data Type" ],
        "summary" : "Get custom data type by name",
        "description" : "Get custom data type by name",
        "operationId" : "getCustomDataTypeByName",
        "parameters" : [ {
          "name" : "custom-data-type-name",
          "in" : "path",
          "description" : "Custom Data Name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomDataTypeDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Custom data type not found"
          }
        }
      }
    },
    "/services/api/public/v1/common/custom-lookup-data-type" : {
      "get" : {
        "tags" : [ "Custom Lookup Data Type" ],
        "summary" : "Get all custom data lookup type",
        "description" : "Get all custom data lookup type",
        "operationId" : "getCustomLookupDataTypesWithRange",
        "parameters" : [ {
          "name" : "cursor",
          "in" : "query",
          "description" : "Cursor to support pagination. Expected to be either null meaning from the start or the value of nextCursor from the response to a previous request",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of custom lookup data type to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedCustomDataTypeDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Custom lookup data type not found"
          }
        }
      }
    },
    "/services/api/public/v1/common/custom-lookup-data-type/{custom-lookup-data-type-id}/custom-lookup-data" : {
      "post" : {
        "tags" : [ "Custom Lookup Data" ],
        "summary" : "Insert new custom lookup data for the specified type",
        "description" : "Insert new custom lookup data for the specified type",
        "operationId" : "insertCustomLookupData",
        "parameters" : [ {
          "name" : "custom-lookup-data-type-id",
          "in" : "path",
          "description" : "Custom Lookup Data Type Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomLookupDataDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource Added"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/services/api/public/v1/common/custom-lookup-data-type/{custom-lookup-data-type-id}/custom-lookup-data/{custom-lookup-data-name}" : {
      "get" : {
        "tags" : [ "Custom Lookup Data" ],
        "summary" : "Get custom lookup data by typeId and name",
        "description" : "Get custom lookup data by typeId and name",
        "operationId" : "getCustomLookupDataTypeByName_1",
        "parameters" : [ {
          "name" : "custom-lookup-data-type-id",
          "in" : "path",
          "description" : "Custom Lookup Data Type Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "custom-lookup-data-name",
          "in" : "path",
          "description" : "Custom Lookup Data Name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomDataTypeDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Custom lookup data not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Custom Lookup Data" ],
        "summary" : "Update existed custom lookup data for the specified type",
        "description" : "Update existed custom lookup data for the specified type",
        "operationId" : "updateCustomLookupData",
        "parameters" : [ {
          "name" : "custom-lookup-data-type-id",
          "in" : "path",
          "description" : "Custom Lookup Data Type Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "custom-lookup-data-name",
          "in" : "path",
          "description" : "Custom Lookup Data Name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomLookupDataDto"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Resource updated"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/services/api/public/v1/common/custom-lookup-data-type/{custom-lookup-data-type-name}" : {
      "get" : {
        "tags" : [ "Custom Data Lookup Type" ],
        "summary" : "Get custom lookup data type by name",
        "description" : "Get custom lookup data type by name",
        "operationId" : "getCustomLookupDataTypeByName",
        "parameters" : [ {
          "name" : "custom-lookup-data-type-name",
          "in" : "path",
          "description" : "Custom Lookup Data Name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomDataTypeDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Custom lookup data type not found"
          }
        }
      }
    },
    "/services/api/public/v1/common/employees/{employee-name}/clock-status" : {
      "get" : {
        "tags" : [ "employee" ],
        "summary" : "Get employee clock status by employee name",
        "operationId" : "getEmployeeClockStatus",
        "parameters" : [ {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Employee Name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmployeeClockStatusDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Employee not found"
          }
        }
      }
    },
    "/services/api/public/v1/common/employees/{employee-name}/survey-responses" : {
      "get" : {
        "tags" : [ "survey" ],
        "summary" : "Get survey responses",
        "description" : "Gets an employee's survey responses ordered by survey start time. The responses can be further filtered by date range.",
        "operationId" : "getSurveyResponse",
        "parameters" : [ {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Name of employee to get survey responses for. Case sensitive.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "surveyStartTimeFrom",
          "in" : "query",
          "description" : "Start of the date range when the survey started.",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "surveyStartTimeTo",
          "in" : "query",
          "description" : "End of the date range when the survey started.",
          "schema" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor obtained from the previous request to this API.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of survey responses to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedSurveyResponseDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No survey responses found."
          },
          "400" : {
            "description" : "Bad request. The date range in the query parameters is not null and follows invalid formats."
          },
          "404" : {
            "description" : "Employee name not found."
          }
        }
      },
      "post" : {
        "tags" : [ "survey" ],
        "summary" : "Save survey response",
        "description" : "Saves employee's response to a survey.",
        "operationId" : "saveSurveyResponse",
        "parameters" : [ {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Name of the employee who answered the survey. Case sensitive.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SurveyResponseDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource added."
          },
          "400" : {
            "description" : "Bad request."
          },
          "404" : {
            "description" : "Employee name not found."
          }
        }
      }
    },
    "/services/api/public/v1/common/employees/{employee-name}/surveys" : {
      "get" : {
        "tags" : [ "survey" ],
        "summary" : "Get surveys",
        "description" : "Returns a list of employee eligible surveys. This list can be further filtered based on the query parameters.",
        "operationId" : "getSurveysByEmployee",
        "parameters" : [ {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Name of the employee to get surveys for. Case sensitive.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "projectName",
          "in" : "query",
          "description" : "Name of the project to get surveys for.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "departmentName",
          "in" : "query",
          "description" : "Name of the department to get surveys for.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "docketName",
          "in" : "query",
          "description" : "Name of the docket to get surveys for.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "jobName",
          "in" : "query",
          "description" : "Name of the job to get surveys for.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timeCodeName",
          "in" : "query",
          "description" : "Name of the time code to get surveys for.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "clockType",
          "in" : "query",
          "description" : "Clock type identifier to get surveys for. The types are \"01\" (ON), \"02\" (OFF), \"03\" (JOB), \"04\" (DOCKET), \"06\" (TIMECODE), \"07\" (DEPARTMENT), \"08\" (PROJECT), and \"11\" (DIRECTIONLESS)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "time",
          "in" : "query",
          "description" : "Used to query surveys that are valid at the given time. In UTC time.",
          "schema" : {
            "$ref" : "#/components/schemas/WbInstant"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "A cursor obtained from the previous request to this API",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of surveys to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedSurveyDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No matching surveys."
          },
          "400" : {
            "description" : "Bad request. The time in the query parameters does not follow the date time format."
          },
          "404" : {
            "description" : "Employee name not found."
          }
        }
      }
    },
    "/services/api/public/v1/common/employees/{employee-name}/udfdata" : {
      "get" : {
        "tags" : [ "employee" ],
        "summary" : "Get employee user defined form data by employee name",
        "operationId" : "getEmployeeUdfData",
        "parameters" : [ {
          "name" : "employee-name",
          "in" : "path",
          "description" : "Employee Name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Cursor to support pagination. Expected to be either null meaning from the start or the value of nextCursor from the response to a previous request",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of UdfData to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedUdfDataDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No employee UDF data found "
          },
          "404" : {
            "description" : "Employee not found"
          }
        }
      }
    },
    "/services/api/public/v1/common/time" : {
      "get" : {
        "tags" : [ "platform" ],
        "summary" : "Gets server time in UTC.",
        "description" : "Gets server time in UTC.",
        "operationId" : "getServerTimeUtc",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string",
                  "description" : "Server time in UTC",
                  "format" : "date-time"
                }
              }
            }
          }
        }
      }
    },
    "/services/api/public/v1/job-scheduler/schedules" : {
      "post" : {
        "tags" : [ "job-scheduler" ],
        "summary" : "Schedules a task to run",
        "description" : "Schedules a task to run as soon as possible.",
        "operationId" : "scheduleTaskToRun",
        "requestBody" : {
          "description" : "Task Schedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JsTaskScheduleDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad request, the task is unknown or is already scheduled"
          }
        }
      }
    },
    "/services/api/public/v1/job-scheduler/tasks" : {
      "get" : {
        "tags" : [ "job-scheduler" ],
        "summary" : "Gets all tasks",
        "description" : "Finds all job scheduler tasks with a given phrase in the description",
        "operationId" : "getTasks",
        "parameters" : [ {
          "name" : "partialDescription",
          "in" : "query",
          "description" : "Search for tasks with description contains this value",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Cursor returned as part of response to previous request for tasks",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of tasks to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedResponseWithJsTaskDto"
                }
              }
            }
          },
          "204" : {
            "description" : "No tasks found"
          }
        }
      }
    },
    "/services/api/public/v1/job-scheduler/tasks/{id}/status" : {
      "get" : {
        "tags" : [ "job-scheduler" ],
        "summary" : "Gets the status of a task",
        "description" : "Gets the status of a task.",
        "operationId" : "getTaskStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the task",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsTaskStatusDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Task with the id is not found"
          }
        }
      }
    },
    "/services/api/public/v1/system/health/system-health" : {
      "get" : {
        "tags" : [ "system-health" ],
        "summary" : "Gets the system health check results",
        "operationId" : "getSystemHealthCheckResults",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SystemHealthCheckDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "BiodataDto" : {
        "required" : [ "employeeName", "finger", "quality", "template", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "employeeName" : {
            "type" : "string",
            "description" : "Name of the employee"
          },
          "finger" : {
            "maximum" : 9,
            "minimum" : 0,
            "type" : "integer",
            "description" : "A number that represents the finger used for getting the biodata",
            "format" : "int32"
          },
          "quality" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "integer",
            "description" : "A number that represents the quality of biodata",
            "format" : "int32"
          },
          "template" : {
            "type" : "string",
            "description" : "Binary representation of the bio data"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the reader"
          }
        }
      },
      "MetadataDto" : {
        "type" : "object",
        "properties" : {
          "nextCursor" : {
            "type" : "string"
          },
          "limit" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PagedResponseWithProjectReaderGroupDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProjectReaderGroupDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "ProjectReaderGroupDto" : {
        "required" : [ "groupName", "projectName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "projectName" : {
            "type" : "string",
            "description" : "Name of the project assigned."
          },
          "groupName" : {
            "type" : "string",
            "description" : "Name of the reader group assigned."
          }
        }
      },
      "DocketReaderGroupDto" : {
        "required" : [ "docketName", "groupName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "docketName" : {
            "type" : "string",
            "description" : "Name of the docket assigned."
          },
          "groupName" : {
            "type" : "string",
            "description" : "Name of the reader group assigned."
          }
        }
      },
      "PagedResponseWithDocketReaderGroupDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DocketReaderGroupDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "PagedResponseWithTimeCodeReaderGroupDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TimeCodeReaderGroupDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "TimeCodeReaderGroupDto" : {
        "required" : [ "groupName", "timeCodeName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "timeCodeName" : {
            "type" : "string",
            "description" : "Name of the time codes assigned."
          },
          "groupName" : {
            "type" : "string",
            "description" : "Name of the reader groups assigned."
          }
        }
      },
      "ActualShiftDto" : {
        "type" : "object",
        "properties" : {
          "startTime" : {
            "$ref" : "#/components/schemas/WbLocalDateTime"
          },
          "endTime" : {
            "$ref" : "#/components/schemas/WbLocalDateTime"
          },
          "breaks" : {
            "maxLength" : 5,
            "type" : "array",
            "description" : "Breaks of the actual shift",
            "items" : {
              "$ref" : "#/components/schemas/BreakDto"
            }
          }
        },
        "description" : "List of actual shifts of the schedule. It contains at least one actual shift. For the first shift, the name is always not null; but the name could be null for shift2 ~ shift5"
      },
      "BreakDto" : {
        "maxLength" : 5,
        "required" : [ "hourTypeName", "timeCodeName" ],
        "type" : "object",
        "properties" : {
          "startTime" : {
            "$ref" : "#/components/schemas/WbLocalDateTime"
          },
          "endTime" : {
            "$ref" : "#/components/schemas/WbLocalDateTime"
          },
          "timeCodeName" : {
            "type" : "string",
            "description" : "Time code name of the break"
          },
          "hourTypeName" : {
            "type" : "string",
            "description" : "Hour type name of the break"
          }
        },
        "description" : "Breaks of the actual shift"
      },
      "ClockEmployeeScheduleDto" : {
        "required" : [ "actualShifts", "employeeName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "udf1" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf2" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf3" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf4" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf5" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "flag1" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag2" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag3" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag4" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag5" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "udf6" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf7" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf8" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf9" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf10" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "flag6" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag7" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag8" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag9" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag10" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "employeeName" : {
            "type" : "string",
            "description" : "Name of employee"
          },
          "workDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "actualShifts" : {
            "type" : "array",
            "description" : "List of actual shifts of the schedule. It contains at least one actual shift. For the first shift, the name is always not null; but the name could be null for shift2 ~ shift5",
            "items" : {
              "$ref" : "#/components/schemas/ActualShiftDto"
            }
          }
        }
      },
      "PagedResponseWithClockEmployeeScheduleDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ClockEmployeeScheduleDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "WbLocalDate" : {
        "type" : "object"
      },
      "WbLocalDateTime" : {
        "pattern" : "yyyy-MM-ddTHH:mm:ss",
        "type" : "object",
        "description" : "Time when the time approval state was changed on a reader. This is the local time of the reader where the time approval is reviewed.",
        "format" : "string"
      },
      "PagedResponseWithBiodataDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BiodataDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "DepartmentReaderGroupDto" : {
        "required" : [ "departmentName", "groupName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "departmentName" : {
            "type" : "string",
            "description" : "Name of the department assigned."
          },
          "groupName" : {
            "type" : "string",
            "description" : "Name of the reader group assigned."
          }
        }
      },
      "PagedResponseWithDepartmentReaderGroupDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DepartmentReaderGroupDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "EmployeeReaderGroupDto" : {
        "required" : [ "employeeName", "groupName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "employeeName" : {
            "type" : "string",
            "description" : "Name of the employee assigned."
          },
          "groupName" : {
            "type" : "string",
            "description" : "Name of the reader group assigned."
          }
        }
      },
      "PagedResponseWithEmployeeReaderGroupDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EmployeeReaderGroupDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "EmployeeJobDto" : {
        "required" : [ "employeeName", "jobName", "preferred", "rank", "rateIndex" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "udf1" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf2" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf3" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf4" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf5" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "flag1" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag2" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag3" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag4" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag5" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "udf6" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf7" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf8" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf9" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf10" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "flag6" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag7" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag8" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag9" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag10" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "employeeName" : {
            "type" : "string",
            "description" : "Name of employee"
          },
          "jobName" : {
            "type" : "string",
            "description" : "Name of job"
          },
          "rateIndex" : {
            "type" : "integer",
            "description" : "Employee job rate index",
            "format" : "int32"
          },
          "workAssignment" : {
            "type" : "integer",
            "description" : "Employee job work assignment",
            "format" : "int32"
          },
          "startDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "endDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "rank" : {
            "type" : "integer",
            "description" : "Employee job rank",
            "format" : "int32"
          },
          "preferred" : {
            "type" : "boolean",
            "description" : "Preferred employee job"
          }
        }
      },
      "PagedResponseWithEmployeeJobDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EmployeeJobDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "ReaderDto" : {
        "required" : [ "description", "groupName", "timezoneName", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "udf1" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf2" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf3" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf4" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf5" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "flag1" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag2" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag3" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag4" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag5" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "name" : {
            "type" : "string",
            "description" : "Short name to identify the dto"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this reader."
          },
          "type" : {
            "type" : "string",
            "description" : "Name of the reader type"
          },
          "groupName" : {
            "type" : "string",
            "description" : "Name of the group to which the reader belongs to"
          },
          "timezoneName" : {
            "type" : "string",
            "description" : "Name of the time zone where the reader is located"
          },
          "ipAddress" : {
            "type" : "string",
            "description" : "Ip address of the reader, Mandatory for readers requiring a stand alone clock server. It may be just ip address or ip address and port separated by colon"
          },
          "subAddress" : {
            "type" : "string",
            "description" : "Identifier used by some readers. Supports one character."
          }
        }
      },
      "ClockEmployeeDto" : {
        "required" : [ "badge", "features", "firstName", "lastName", "name", "supervisor" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "udf1" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf2" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf3" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf4" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf5" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "flag1" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag2" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag3" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag4" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag5" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of employee"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of employee"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of employee"
          },
          "badge" : {
            "type" : "string",
            "description" : "Badge number of employee"
          },
          "supervisor" : {
            "type" : "boolean",
            "description" : "A flag to indicate if the employee is supervisor"
          },
          "pin" : {
            "type" : "string",
            "description" : "Pin of employee"
          },
          "features" : {
            "type" : "array",
            "description" : "Collection of features that the employee has",
            "items" : {
              "$ref" : "#/components/schemas/FeatureDto"
            }
          }
        }
      },
      "FeatureDto" : {
        "required" : [ "enabled", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the feature. It can be pin, bio, schedule or mealConfirmation"
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "A flag to indicate if the feature is enabled or not"
          }
        },
        "description" : "Collection of features that the employee has"
      },
      "PagedResponseWithClockEmployeeDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ClockEmployeeDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "DepartmentDto" : {
        "required" : [ "labourMetricSecurityName", "name", "unauthorize" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Short name to identify the dto"
          },
          "description" : {
            "type" : "string",
            "description" : "Detailed description of the Dto",
            "nullable" : true
          },
          "startDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "endDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "labourMetricSecurityName" : {
            "type" : "string",
            "description" : "Name of the labor metric security"
          },
          "unauthorize" : {
            "type" : "boolean",
            "description" : "A flag to indicate if work detail with this department is unauthorized"
          },
          "teamName" : {
            "type" : "string",
            "description" : "Name of the team",
            "nullable" : true
          },
          "val1" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val2" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val3" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val4" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val5" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "refKey1" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey2" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey3" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey4" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey5" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "flag1" : {
            "type" : "string",
            "description" : "Supports only one character",
            "nullable" : true
          },
          "flag2" : {
            "type" : "string",
            "description" : "Supports only one character",
            "nullable" : true
          },
          "flag3" : {
            "type" : "string",
            "description" : "Supports only one character",
            "nullable" : true
          },
          "flag4" : {
            "type" : "string",
            "description" : "Supports only one character",
            "nullable" : true
          },
          "flag5" : {
            "type" : "string",
            "description" : "Supports only one character",
            "nullable" : true
          }
        }
      },
      "PagedResponseWithDepartmentDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DepartmentDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "ReaderConfigDto" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Short name to identify the dto"
          },
          "description" : {
            "type" : "string",
            "description" : "Detailed description of the Dto",
            "nullable" : true
          },
          "version" : {
            "type" : "integer",
            "description" : "Version of the configuration",
            "format" : "int32"
          },
          "softwareVersion" : {
            "type" : "string",
            "description" : "Version of the software to run on the reader Applicable to readers that do not require a clock server"
          },
          "programFilename" : {
            "type" : "string",
            "description" : "Name of the file to send to the device. Used by CMI and ATS clocks in UCS mode"
          },
          "autoConnect" : {
            "type" : "boolean",
            "description" : "Flag to indicate if clock server can attempt to auto connect to a reader. Applicable to CMI clocks"
          },
          "swipeMethod" : {
            "type" : "string",
            "description" : "Swipe method applicable at hardware clocks not requiring a clock server.",
            "enum" : [ "DEFAULT, SWIPE_AND_GO, DIRECTIONLESS" ]
          },
          "swipeSharingEnabled" : {
            "type" : "boolean",
            "description" : "Flag to indicate if the reader participates in sharing swipes with other readers."
          },
          "pinEnabled" : {
            "type" : "boolean",
            "description" : "Flag to indicate if PIN validation is enabled at the reader."
          },
          "bioMode" : {
            "type" : "string",
            "description" : "Mode of finger print reader in the reader",
            "enum" : [ "NONE, IDENTIFICATION, VERIFICATION" ]
          },
          "mealConfirmationEnabled" : {
            "type" : "boolean",
            "description" : "Flag to indicate if meal confirmation is enabled at the reader."
          },
          "scheduleValidationConfig" : {
            "$ref" : "#/components/schemas/ScheduleValidationConfigDto"
          }
        }
      },
      "ScheduleValidationConfigDto" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "description" : "Flag to indicate if schedule validation is enabled."
          },
          "startGraceMinutes" : {
            "type" : "integer",
            "description" : "Grace time in minutes at the start of a schedule.",
            "format" : "int32"
          },
          "endGraceMinutes" : {
            "type" : "integer",
            "description" : "Grace time in minutes at the end of a schedule.",
            "format" : "int32"
          }
        },
        "description" : "Parameters for schedule validation."
      },
      "PagedResponseWithProjectDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProjectDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "ProjectDto" : {
        "required" : [ "labourMetricSecurityName", "name", "unauthorize" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Short name to identify the dto"
          },
          "description" : {
            "type" : "string",
            "description" : "Detailed description of the Dto",
            "nullable" : true
          },
          "startDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "endDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "labourMetricSecurityName" : {
            "type" : "string",
            "description" : "Name of the labor metric security"
          },
          "unauthorize" : {
            "type" : "boolean",
            "description" : "A flag to indicate if work detail with this project is unauthorized"
          },
          "locationName" : {
            "type" : "string",
            "description" : "Name of the associated location",
            "nullable" : true
          },
          "orderNumber" : {
            "type" : "string",
            "description" : "Unique identifier for the project",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "description" : "An indicator designating the operation as either 'active', 'closed', or 'paused'",
            "nullable" : true
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quantity of the project",
            "format" : "double",
            "nullable" : true
          },
          "createDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "val1" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val2" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val3" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val4" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val5" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "flag1" : {
            "type" : "string",
            "description" : "User defined flag - supports only one character",
            "nullable" : true
          },
          "flag2" : {
            "type" : "string",
            "description" : "User defined flag - supports only one character",
            "nullable" : true
          },
          "flag3" : {
            "type" : "string",
            "description" : "User defined flag - supports only one character",
            "nullable" : true
          },
          "flag4" : {
            "type" : "string",
            "description" : "User defined flag - supports only one character",
            "nullable" : true
          },
          "flag5" : {
            "type" : "string",
            "description" : "User defined flag - supports only one character",
            "nullable" : true
          },
          "refKey1" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey2" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey3" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey4" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey5" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          }
        }
      },
      "JobDto" : {
        "required" : [ "labourMetricSecurityName", "name", "unAuthorize" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Short name to identify the dto"
          },
          "description" : {
            "type" : "string",
            "description" : "Detailed description of the Dto",
            "nullable" : true
          },
          "startDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "endDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "labourMetricSecurityName" : {
            "type" : "string",
            "description" : "Name of the labor metric security"
          },
          "jobCode" : {
            "type" : "string",
            "description" : "A code that represents the job",
            "nullable" : true
          },
          "skillRequired" : {
            "type" : "boolean",
            "description" : "A flag to indicate if the job requires skills",
            "nullable" : true
          },
          "unAuthorize" : {
            "type" : "boolean",
            "description" : "A flag to indicate if workdetal with this job is unathorized"
          },
          "tipped" : {
            "type" : "boolean",
            "description" : "A flag to indicate if the job is eligible for tipping",
            "nullable" : true
          },
          "tipCalculationMethod" : {
            "type" : "string",
            "description" : "Method used for calculation of the tip amount",
            "nullable" : true,
            "enum" : [ "ACTUAL", "INFERRED", "INDIRECT" ]
          },
          "inferredTipPercentage" : {
            "type" : "string",
            "description" : "Percentage used for INFERRED tip calculation",
            "nullable" : true
          },
          "shiftOffset" : {
            "type" : "integer",
            "description" : "Number of minutes to offset start or end times of shifts with this job",
            "format" : "int32",
            "nullable" : true
          },
          "locationKeyHolder" : {
            "type" : "boolean",
            "description" : "A flag to indicate if the employee with this job holds key to job location",
            "nullable" : true
          },
          "journalTitleCode" : {
            "type" : "integer",
            "description" : "Payroll based journal title code to match external systems",
            "format" : "int32",
            "nullable" : true
          },
          "healthCareReportType" : {
            "type" : "string",
            "description" : "Health care report type, null is possible",
            "nullable" : true
          },
          "val1" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val2" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val3" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val4" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val5" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val6" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val7" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val8" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val9" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "val10" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "flag1" : {
            "type" : "string",
            "description" : "User defined field. Supports only one character",
            "nullable" : true
          },
          "flag2" : {
            "type" : "string",
            "description" : "User defined field. Supports only one character",
            "nullable" : true
          },
          "flag3" : {
            "type" : "string",
            "description" : "User defined field. Supports only one character",
            "nullable" : true
          },
          "flag4" : {
            "type" : "string",
            "description" : "User defined field. Supports only one character",
            "nullable" : true
          },
          "flag5" : {
            "type" : "string",
            "description" : "User defined field. Supports only one character",
            "nullable" : true
          },
          "refKey1" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey2" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey3" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey4" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey5" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          }
        }
      },
      "PagedResponseWithJobDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "PagedResponseWithTimeCodeDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TimeCodeDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "TimeCodeDto" : {
        "required" : [ "activeWhenScheduled", "break", "colorName", "daysOfWeek", "hourTypeName", "includedInProductiveHoursReport", "includedOnYearAtAGlanceReport", "sortOrder", "unAuthorize" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "udf1" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf2" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf3" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf4" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf5" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "flag1" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag2" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag3" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag4" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag5" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "udf6" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf7" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf8" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf9" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf10" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "flag6" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag7" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag8" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag9" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag10" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "name" : {
            "type" : "string",
            "description" : "Short name to identify the dto"
          },
          "description" : {
            "type" : "string",
            "description" : "Detailed description of the Dto",
            "nullable" : true
          },
          "defaultMinutes" : {
            "type" : "integer",
            "description" : "Default number of minutes for the time code",
            "format" : "int32",
            "nullable" : true
          },
          "daysOfWeek" : {
            "type" : "array",
            "description" : "Days of week when this time code can be created",
            "items" : {
              "type" : "boolean",
              "description" : "Days of week when this time code can be created"
            }
          },
          "activeWhenScheduled" : {
            "type" : "boolean",
            "description" : "Flag that determines if this time code should only be used when employee is scheduled to work"
          },
          "colorName" : {
            "type" : "string",
            "description" : "Color name of the time code"
          },
          "hourTypeName" : {
            "type" : "string",
            "description" : "Hour type name of the time code"
          },
          "unAuthorize" : {
            "type" : "boolean",
            "description" : "Flag that determines if this time code should be unauthorized"
          },
          "sortOrder" : {
            "type" : "integer",
            "description" : "Sort order of the time",
            "format" : "int32"
          },
          "includedOnYearAtAGlanceReport" : {
            "type" : "boolean",
            "description" : "Flag that determines if this time code should be included on the Year at a Glance Report"
          },
          "irregular" : {
            "type" : "boolean",
            "description" : "Flag that determines if this time code is irregular",
            "nullable" : true
          },
          "defaultRate" : {
            "type" : "number",
            "description" : "Default rate for this time code",
            "format" : "double",
            "nullable" : true
          },
          "includedInSummary" : {
            "type" : "boolean",
            "description" : "Flag that determines if this time code should be included in summary",
            "nullable" : true
          },
          "labourMetricSecurityName" : {
            "type" : "string",
            "description" : "Labour metric security name of the time code",
            "nullable" : true
          },
          "longTermAbsence" : {
            "type" : "boolean",
            "description" : "Flag indicates whether the time code is an LTA",
            "nullable" : true
          },
          "includedInProductiveHoursReport" : {
            "type" : "boolean",
            "description" : "Flag indicates whether the time code represents productive hours"
          },
          "excludedFromReportingTotals" : {
            "type" : "boolean",
            "description" : "Flag indicates whether the time code should be excluded in reporting totals",
            "nullable" : true
          },
          "break" : {
            "type" : "boolean",
            "description" : "Flag indicates whether the time code is break"
          }
        }
      },
      "DocketDto" : {
        "required" : [ "activitySetName", "control", "labourMetricSecurityName", "machineName", "partName", "pieceRate", "projectName", "sequenceEnforced", "unauthorize" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "udf1" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf2" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf3" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf4" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf5" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "flag1" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag2" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag3" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag4" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag5" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "name" : {
            "type" : "string",
            "description" : "Short name to identify the dto"
          },
          "description" : {
            "type" : "string",
            "description" : "Detailed description of the Dto",
            "nullable" : true
          },
          "startDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "endDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "labourMetricSecurityName" : {
            "type" : "string",
            "description" : "Name of the labor metric security"
          },
          "unauthorize" : {
            "type" : "boolean",
            "description" : "A flag to indicate if work detail with this docket is unauthorized"
          },
          "activitySetName" : {
            "type" : "string",
            "description" : "Name of the associated activity set"
          },
          "machineName" : {
            "type" : "string",
            "description" : "Name of the associated machine"
          },
          "partName" : {
            "type" : "string",
            "description" : "Name of the associated part"
          },
          "projectName" : {
            "type" : "string",
            "description" : "Name of the associated project"
          },
          "pieceRate" : {
            "type" : "number",
            "description" : "Rate of pay per piece completed",
            "format" : "double"
          },
          "control" : {
            "type" : "boolean",
            "description" : "A flag to indicate whether or not the operation is a control operation"
          },
          "standardRunMinutes" : {
            "type" : "integer",
            "description" : "The usual amount of minutes it takes for an employee to complete the operation",
            "format" : "int32",
            "nullable" : true
          },
          "standardSetupMinutes" : {
            "type" : "integer",
            "description" : "The usual amount of minutes it takes for an employee to perform the setup activities necessary for the employee to complete the operation",
            "format" : "int32",
            "nullable" : true
          },
          "state" : {
            "type" : "string",
            "description" : "An indicator designating the current state of the docket (active, released, etc.)",
            "nullable" : true
          },
          "quantity" : {
            "type" : "number",
            "description" : "Expected quantity or units per hour (the decimal places is limited to 0 in WFM maintenance form)",
            "format" : "double",
            "nullable" : true
          },
          "standardQuantity" : {
            "type" : "number",
            "description" : "Standard quantity or units per hour (the decimal places is limited to 0 in WFM maintenance form)",
            "format" : "double",
            "nullable" : true
          },
          "standardDuration" : {
            "type" : "number",
            "description" : "Standard duration to complete the docket",
            "format" : "double",
            "nullable" : true
          },
          "sequenceNumber" : {
            "type" : "integer",
            "description" : "A number that holds the docket's place in the sequence (a project can be associated with multiple dockets. In some cases, the dockets associated with a project should be completed sequentially)",
            "format" : "int32",
            "nullable" : true
          },
          "sequenceEnforced" : {
            "type" : "boolean",
            "description" : "A flag to indicate whether or not a defined docket sequence will be enforced"
          },
          "parentDocketName" : {
            "type" : "string",
            "description" : "Name of the parent docket name. When a parent is specified, the operation will be considered a sub-operation of the specified parent operation",
            "nullable" : true
          },
          "refKey1" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey2" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey3" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey4" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          },
          "refKey5" : {
            "type" : "integer",
            "description" : "Client specific foreign key field",
            "format" : "int64",
            "nullable" : true
          }
        }
      },
      "PagedResponseWithDocketDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DocketDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "PagedResponseWithTimeApprovalDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TimeApprovalDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "TimeApprovalDto" : {
        "required" : [ "employeeName", "stateName", "workMinutes" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "employeeName" : {
            "type" : "string",
            "description" : "Name of the employee who owns the time approval."
          },
          "startWorkDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "endWorkDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "workMinutes" : {
            "type" : "integer",
            "description" : "The number of minutes worked between start and end work date.",
            "format" : "int32"
          },
          "inactiveRevision" : {
            "type" : "integer",
            "description" : "Inactive revision number of the time approval. The inactive revision of the existing time approval will be set or increased when the time approval is recreated.",
            "format" : "int32",
            "nullable" : true
          },
          "stateName" : {
            "type" : "string",
            "description" : "State name of the time approval. Allowed state names are: PENDING, APPROVED, REJECTED, CREATED, SHOWN, RESOLVED."
          },
          "device" : {
            "type" : "string",
            "description" : "Device where the time approval is processed. A null value is returned for unprocessed time approvals. For processed time approval, the value can be reader name or reader IP address.",
            "nullable" : true
          },
          "comment" : {
            "type" : "string",
            "description" : "User comment.",
            "nullable" : true
          },
          "processedTime" : {
            "$ref" : "#/components/schemas/WbInstant"
          },
          "udf1" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "udf2" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "udf3" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "udf4" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          },
          "udf5" : {
            "type" : "string",
            "description" : "User defined field",
            "nullable" : true
          }
        }
      },
      "WbInstant" : {
        "type" : "object"
      },
      "PagedResponseWithScheduledSwipeDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ScheduledSwipeDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "ScheduledSwipeDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "employeeName" : {
            "type" : "string",
            "description" : "Identifies the employee to whom the scheduled swipe belongs to"
          },
          "workDate" : {
            "$ref" : "#/components/schemas/WbLocalDate"
          },
          "type" : {
            "type" : "string",
            "description" : "Identifies swipe type:- \"01\" (IN), \"02\" (OUT), \"06\" (Time code change)"
          },
          "time" : {
            "$ref" : "#/components/schemas/WbLocalDateTime"
          },
          "real" : {
            "type" : "boolean",
            "description" : "If true, then there is a corresponding accepted swipe with a matching time and type. If false, the time represents scheduled swipe time"
          },
          "clockData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Contains key value pairs of data associated with the scheduled swipe. When the value of type is \"06\" (Time code change) then an entry with the key TCODE must exist",
              "nullable" : true
            },
            "description" : "Contains key value pairs of data associated with the scheduled swipe. When the value of type is \"06\" (Time code change) then an entry with the key TCODE must exist",
            "nullable" : true
          }
        }
      },
      "JobReaderGroupDto" : {
        "required" : [ "groupName", "jobName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "jobName" : {
            "type" : "string",
            "description" : "Name of the job assigned."
          },
          "groupName" : {
            "type" : "string",
            "description" : "Name of the reader group assigned."
          }
        }
      },
      "PagedResponseWithJobReaderGroupDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobReaderGroupDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "ReaderGroupDto" : {
        "required" : [ "name", "serverName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Short name to identify the dto"
          },
          "description" : {
            "type" : "string",
            "description" : "Detailed description of the Dto",
            "nullable" : true
          },
          "serverName" : {
            "type" : "string",
            "description" : "Name of the server that serves readers of this group"
          },
          "swipeSharingEnabled" : {
            "type" : "boolean",
            "description" : "A flag to indicate if readers of this reader group participate in sharing swipes"
          },
          "mealConfirmationEnabled" : {
            "type" : "boolean",
            "description" : "A flag to indicate if meal confirmation is enabled on the readers of this reader group"
          }
        }
      },
      "PagedResponseWithReaderGroupDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReaderGroupDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "PagedResponseWithReaderDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReaderDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "ReaderStateChangeDto" : {
        "type" : "object",
        "properties" : {
          "readerStates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReaderStateDto"
            }
          }
        }
      },
      "ReaderStateDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifier of the reader state",
            "format" : "int64",
            "readOnly" : true
          },
          "readerName" : {
            "type" : "string",
            "description" : "Name of the reader "
          },
          "ipAddress" : {
            "type" : "string",
            "description" : "IP address of the reader "
          },
          "status" : {
            "type" : "string",
            "description" : "status of the reader, required if last poll time is present",
            "enum" : [ "OFFLINE, ONLINE, ERROR, INCORRECT_CONFIGURATION, WAS_CONTACTING" ]
          },
          "pollTime" : {
            "type" : "string",
            "description" : "Time at which the reader status was updated, required if status is present",
            "format" : "date-time"
          }
        }
      },
      "GeoLocationDto" : {
        "required" : [ "latitude", "longitude" ],
        "type" : "object",
        "properties" : {
          "latitude" : {
            "type" : "number",
            "description" : "Latitude of the location ",
            "format" : "double",
            "example" : 35.7795897
          },
          "longitude" : {
            "type" : "number",
            "description" : "Longitude of the location",
            "format" : "double",
            "example" : -78.6381787
          }
        },
        "description" : "Geo location of the reader where the swipe was done."
      },
      "PagedResponseWithSwipeDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SwipeDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "SwipeDto" : {
        "required" : [ "employeeName", "extraData", "readerName", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "employeeName" : {
            "type" : "string",
            "description" : "Identifies employee who performed the swipe"
          },
          "type" : {
            "type" : "string",
            "description" : "Identifies swipe type. These are the types that affect time sheet.  \"01\" (IN), \"02\" (OUT), \"03\" (JOB change), \"04\" (Docket change), \"06\" (Time code change), \"07\" (Department change), \"08\" (Project change), \"09\" docket change when time spent on the docket is known also knokwn as timesheet swipe.  \"11\" (Directionless). There are also other types which do not affect time sheet and depend on the clock configuration."
          },
          "time" : {
            "$ref" : "#/components/schemas/SwipeTimeDto"
          },
          "readerName" : {
            "type" : "string",
            "description" : "Name of the reader where the swipe was done"
          },
          "readerIpAddress" : {
            "type" : "string",
            "description" : "IP address of the reader where the swipe was done."
          },
          "readerGeoLocation" : {
            "$ref" : "#/components/schemas/GeoLocationDto"
          },
          "departmentName" : {
            "type" : "string",
            "description" : "Name of the department. Required if the swipe type is department change."
          },
          "docketName" : {
            "type" : "string",
            "description" : "Name of the docket. Required if the swipe type is docket change (04) or time sheet(09)"
          },
          "docketTime" : {
            "type" : "integer",
            "description" : "Time spent on the docket in minutes. Required if swipe type is time sheet (09)",
            "format" : "int32"
          },
          "docketQuantity" : {
            "type" : "integer",
            "description" : "Quantity of items in the docket",
            "format" : "int32"
          },
          "jobName" : {
            "type" : "string",
            "description" : "Name of the job. Required if the swipe type is job change."
          },
          "projectName" : {
            "type" : "string",
            "description" : "Name of the project. Required if the swipe type is project change."
          },
          "timeCodeName" : {
            "type" : "string",
            "description" : "Name of the time code. Required if the swipe type is time code change."
          },
          "extraData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Contains name value pairs for data captured at the clocks that are not accommodated by other fields."
            },
            "description" : "Contains name value pairs for data captured at the clocks that are not accommodated by other fields."
          }
        }
      },
      "SwipeTimeDto" : {
        "pattern" : "yyyy-MM-dd'T'HH:mm:ss",
        "required" : [ "daylightSaving", "timezoneName" ],
        "type" : "object",
        "properties" : {
          "localTime" : {
            "$ref" : "#/components/schemas/WbLocalDateTime"
          },
          "timezoneName" : {
            "type" : "string",
            "description" : "Java name of the time zone where the device is located",
            "format" : "string"
          },
          "daylightSaving" : {
            "type" : "boolean",
            "description" : "A flag to indicate if day light saving time is effective",
            "format" : "boolean"
          }
        },
        "description" : "Local time of the reader when the swipe was done",
        "format" : "string"
      },
      "RejectedSwipeDto" : {
        "required" : [ "employeeName", "extraData", "readerName", "reason", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "employeeName" : {
            "type" : "string",
            "description" : "Identifies employee who performed the swipe"
          },
          "type" : {
            "type" : "string",
            "description" : "Identifies swipe type. These are the types that affect time sheet.  \"01\" (IN), \"02\" (OUT), \"03\" (JOB change), \"04\" (Docket change), \"06\" (Time code change), \"07\" (Department change), \"08\" (Project change), \"09\" docket change when time spent on the docket is known also knokwn as timesheet swipe.  \"11\" (Directionless). There are also other types which do not affect time sheet and depend on the clock configuration."
          },
          "time" : {
            "$ref" : "#/components/schemas/SwipeTimeDto"
          },
          "readerName" : {
            "type" : "string",
            "description" : "Name of the reader where the swipe was done"
          },
          "readerIpAddress" : {
            "type" : "string",
            "description" : "IP address of the reader where the swipe was done."
          },
          "readerGeoLocation" : {
            "$ref" : "#/components/schemas/GeoLocationDto"
          },
          "departmentName" : {
            "type" : "string",
            "description" : "Name of the department. Required if the swipe type is department change."
          },
          "docketName" : {
            "type" : "string",
            "description" : "Name of the docket. Required if the swipe type is docket change (04) or time sheet(09)"
          },
          "docketTime" : {
            "type" : "integer",
            "description" : "Time spent on the docket in minutes. Required if swipe type is time sheet (09)",
            "format" : "int32"
          },
          "docketQuantity" : {
            "type" : "integer",
            "description" : "Quantity of items in the docket",
            "format" : "int32"
          },
          "jobName" : {
            "type" : "string",
            "description" : "Name of the job. Required if the swipe type is job change."
          },
          "projectName" : {
            "type" : "string",
            "description" : "Name of the project. Required if the swipe type is project change."
          },
          "timeCodeName" : {
            "type" : "string",
            "description" : "Name of the time code. Required if the swipe type is time code change."
          },
          "extraData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Contains name value pairs for data captured at the clocks that are not accommodated by other fields."
            },
            "description" : "Contains name value pairs for data captured at the clocks that are not accommodated by other fields."
          },
          "reason" : {
            "type" : "string",
            "description" : "Reason for rejecting the swipe"
          }
        }
      },
      "TimeApprovalStateChangeDto" : {
        "required" : [ "device", "stateName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "timeApprovalId" : {
            "type" : "integer",
            "description" : "Identifier of the time approval that is going to be updated. If it exists, it must have the same ID in the endpoint.",
            "format" : "int64",
            "nullable" : true
          },
          "device" : {
            "type" : "string",
            "description" : "Reader where the time approval is processed. It can be reader name or reader IP address."
          },
          "stateName" : {
            "type" : "string",
            "description" : "State name of the time approval. The allowed state names are: APPROVED, REJECTED, SHOWN and RESOLVED."
          },
          "comment" : {
            "type" : "string",
            "description" : "User comment.",
            "nullable" : true
          },
          "time" : {
            "$ref" : "#/components/schemas/WbLocalDateTime"
          }
        }
      },
      "SystemHealthCheckDto" : {
        "type" : "object",
        "properties" : {
          "timestamp" : {
            "type" : "string"
          },
          "errors" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "warnings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "executedTests" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "CurrentUserDto" : {
        "required" : [ "employeeName", "userName" ],
        "type" : "object",
        "properties" : {
          "userName" : {
            "type" : "string",
            "description" : "User Name",
            "readOnly" : true
          },
          "employeeName" : {
            "type" : "string",
            "description" : "Employee Name",
            "readOnly" : true
          }
        },
        "description" : "Current User containing user name and employee name"
      },
      "CustomDataDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "typeId" : {
            "type" : "integer",
            "description" : "The value of type id",
            "format" : "int64"
          },
          "text1" : {
            "type" : "string",
            "description" : "The value of text1"
          },
          "text2" : {
            "type" : "string",
            "description" : "The value of text2"
          },
          "text3" : {
            "type" : "string",
            "description" : "The value of text3"
          },
          "text4" : {
            "type" : "string",
            "description" : "The value of text4"
          },
          "text5" : {
            "type" : "string",
            "description" : "The value of text5"
          },
          "text6" : {
            "type" : "string",
            "description" : "The value of text6"
          },
          "text7" : {
            "type" : "string",
            "description" : "The value of text7"
          },
          "text8" : {
            "type" : "string",
            "description" : "The value of text8"
          },
          "text9" : {
            "type" : "string",
            "description" : "The value of text9"
          },
          "text10" : {
            "type" : "string",
            "description" : "The value of text10"
          },
          "character1" : {
            "type" : "string",
            "description" : "The value of char1"
          },
          "character2" : {
            "type" : "string",
            "description" : "The value of char2"
          },
          "character3" : {
            "type" : "string",
            "description" : "The value of char3"
          },
          "character4" : {
            "type" : "string",
            "description" : "The value of char4"
          },
          "character5" : {
            "type" : "string",
            "description" : "The value of char5"
          },
          "character6" : {
            "type" : "string",
            "description" : "The value of char6"
          },
          "character7" : {
            "type" : "string",
            "description" : "The value of char7"
          },
          "character8" : {
            "type" : "string",
            "description" : "The value of char8"
          },
          "character9" : {
            "type" : "string",
            "description" : "The value of char9"
          },
          "character10" : {
            "type" : "string",
            "description" : "The value of char10"
          },
          "date1" : {
            "type" : "string",
            "description" : "The value of date1",
            "format" : "date-time"
          },
          "date2" : {
            "type" : "string",
            "description" : "The value of date2",
            "format" : "date-time"
          },
          "date3" : {
            "type" : "string",
            "description" : "The value of date3",
            "format" : "date-time"
          },
          "date4" : {
            "type" : "string",
            "description" : "The value of date4",
            "format" : "date-time"
          },
          "date5" : {
            "type" : "string",
            "description" : "The value of date5",
            "format" : "date-time"
          },
          "date6" : {
            "type" : "string",
            "description" : "The value of date6",
            "format" : "date-time"
          },
          "date7" : {
            "type" : "string",
            "description" : "The value of date7",
            "format" : "date-time"
          },
          "date8" : {
            "type" : "string",
            "description" : "The value of date8",
            "format" : "date-time"
          },
          "date9" : {
            "type" : "string",
            "description" : "The value of date9",
            "format" : "date-time"
          },
          "date10" : {
            "type" : "string",
            "description" : "The value of date10",
            "format" : "date-time"
          },
          "number1" : {
            "type" : "integer",
            "description" : "The value of num1",
            "format" : "int32"
          },
          "number2" : {
            "type" : "integer",
            "description" : "The value of num2",
            "format" : "int32"
          },
          "number3" : {
            "type" : "integer",
            "description" : "The value of num3",
            "format" : "int32"
          },
          "number4" : {
            "type" : "integer",
            "description" : "The value of num4",
            "format" : "int32"
          },
          "number5" : {
            "type" : "integer",
            "description" : "The value of num5",
            "format" : "int32"
          },
          "number6" : {
            "type" : "integer",
            "description" : "The value of num6",
            "format" : "int32"
          },
          "number7" : {
            "type" : "integer",
            "description" : "The value of num7",
            "format" : "int32"
          },
          "number8" : {
            "type" : "integer",
            "description" : "The value of num8",
            "format" : "int32"
          },
          "number9" : {
            "type" : "integer",
            "description" : "The value of num9",
            "format" : "int32"
          },
          "number10" : {
            "type" : "integer",
            "description" : "The value of num10",
            "format" : "int32"
          },
          "decimal1" : {
            "type" : "number",
            "description" : "The value of dec1",
            "format" : "double"
          },
          "decimal2" : {
            "type" : "number",
            "description" : "The value of dec2",
            "format" : "double"
          },
          "decimal3" : {
            "type" : "number",
            "description" : "The value of dec3",
            "format" : "double"
          },
          "decimal4" : {
            "type" : "number",
            "description" : "The value of dec4",
            "format" : "double"
          },
          "decimal5" : {
            "type" : "number",
            "description" : "The value of dec5",
            "format" : "double"
          },
          "decimal6" : {
            "type" : "number",
            "description" : "The value of dec6",
            "format" : "double"
          },
          "decimal7" : {
            "type" : "number",
            "description" : "The value of dec7",
            "format" : "double"
          },
          "decimal8" : {
            "type" : "number",
            "description" : "The value of dec8",
            "format" : "double"
          },
          "decimal9" : {
            "type" : "number",
            "description" : "The value of dec9",
            "format" : "double"
          },
          "decimal10" : {
            "type" : "number",
            "description" : "The value of dec10",
            "format" : "double"
          }
        }
      },
      "CustomDataTypeDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "udf1" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf2" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf3" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf4" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "udf5" : {
            "type" : "string",
            "description" : "User defined field"
          },
          "flag1" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag2" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag3" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag4" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "flag5" : {
            "type" : "string",
            "description" : "User defined flag"
          },
          "name" : {
            "type" : "string",
            "description" : "Short name to identify the dto"
          },
          "description" : {
            "type" : "string",
            "description" : "Detailed description of the Dto",
            "nullable" : true
          },
          "text1Name" : {
            "type" : "string",
            "description" : "The value of text1 name"
          },
          "text2Name" : {
            "type" : "string",
            "description" : "The value of text2 name"
          },
          "text3Name" : {
            "type" : "string",
            "description" : "The value of text3 name"
          },
          "text4Name" : {
            "type" : "string",
            "description" : "The value of text4 name"
          },
          "text5Name" : {
            "type" : "string",
            "description" : "The value of text5 name"
          },
          "text6Name" : {
            "type" : "string",
            "description" : "The value of text6 name"
          },
          "text7Name" : {
            "type" : "string",
            "description" : "The value of text7 name"
          },
          "text8Name" : {
            "type" : "string",
            "description" : "The value of text8 name"
          },
          "text9Name" : {
            "type" : "string",
            "description" : "The value of text9 name"
          },
          "text10Name" : {
            "type" : "string",
            "description" : "The value of text10 name"
          },
          "character1Name" : {
            "type" : "string",
            "description" : "The value of char1 name"
          },
          "character2Name" : {
            "type" : "string",
            "description" : "The value of char2 name"
          },
          "character3Name" : {
            "type" : "string",
            "description" : "The value of char3 name"
          },
          "character4Name" : {
            "type" : "string",
            "description" : "The value of char4 name"
          },
          "character5Name" : {
            "type" : "string",
            "description" : "The value of char5 name"
          },
          "character6Name" : {
            "type" : "string",
            "description" : "The value of char6 name"
          },
          "character7Name" : {
            "type" : "string",
            "description" : "The value of char7 name"
          },
          "character8Name" : {
            "type" : "string",
            "description" : "The value of char8 name"
          },
          "character9Name" : {
            "type" : "string",
            "description" : "The value of char9 name"
          },
          "character10Name" : {
            "type" : "string",
            "description" : "The value of char10 name"
          },
          "date1Name" : {
            "type" : "string",
            "description" : "The value of date1 name"
          },
          "date2Name" : {
            "type" : "string",
            "description" : "The value of date2 name"
          },
          "date3Name" : {
            "type" : "string",
            "description" : "The value of date3 name"
          },
          "date4Name" : {
            "type" : "string",
            "description" : "The value of date4 name"
          },
          "date5Name" : {
            "type" : "string",
            "description" : "The value of date5 name"
          },
          "date6Name" : {
            "type" : "string",
            "description" : "The value of date6 name"
          },
          "date7Name" : {
            "type" : "string",
            "description" : "The value of date7 name"
          },
          "date8Name" : {
            "type" : "string",
            "description" : "The value of date8 name"
          },
          "date9Name" : {
            "type" : "string",
            "description" : "The value of date9 name"
          },
          "date10Name" : {
            "type" : "string",
            "description" : "The value of date10 name"
          },
          "number1Name" : {
            "type" : "string",
            "description" : "The value of num1 name"
          },
          "number2Name" : {
            "type" : "string",
            "description" : "The value of num2 name"
          },
          "number3Name" : {
            "type" : "string",
            "description" : "The value of num3 name"
          },
          "number4Name" : {
            "type" : "string",
            "description" : "The value of num4 name"
          },
          "number5Name" : {
            "type" : "string",
            "description" : "The value of num5 name"
          },
          "number6Name" : {
            "type" : "string",
            "description" : "The value of num6 name"
          },
          "number7Name" : {
            "type" : "string",
            "description" : "The value of num7 name"
          },
          "number8Name" : {
            "type" : "string",
            "description" : "The value of num8 name"
          },
          "number9Name" : {
            "type" : "string",
            "description" : "The value of num9 name"
          },
          "number10Name" : {
            "type" : "string",
            "description" : "The value of num10 name"
          },
          "decimal1Name" : {
            "type" : "string",
            "description" : "The value of dec1 name"
          },
          "decimal2Name" : {
            "type" : "string",
            "description" : "The value of dec2 name"
          },
          "decimal3Name" : {
            "type" : "string",
            "description" : "The value of dec3 name"
          },
          "decimal4Name" : {
            "type" : "string",
            "description" : "The value of dec4 name"
          },
          "decimal5Name" : {
            "type" : "string",
            "description" : "The value of dec5 name"
          },
          "decimal6Name" : {
            "type" : "string",
            "description" : "The value of dec6 name"
          },
          "decimal7Name" : {
            "type" : "string",
            "description" : "The value of dec7 name"
          },
          "decimal8Name" : {
            "type" : "string",
            "description" : "The value of dec8 name"
          },
          "decimal9Name" : {
            "type" : "string",
            "description" : "The value of dec9 name"
          },
          "decimal10Name" : {
            "type" : "string",
            "description" : "The value of dec10 name"
          }
        }
      },
      "PagedCustomDataTypeDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomDataTypeDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        },
        "description" : "Custom Data Type"
      },
      "CustomLookupDataDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "typeId" : {
            "type" : "integer",
            "description" : "The value of type id",
            "format" : "int64"
          },
          "text1" : {
            "type" : "string",
            "description" : "The value of text1"
          },
          "text2" : {
            "type" : "string",
            "description" : "The value of text2"
          },
          "text3" : {
            "type" : "string",
            "description" : "The value of text3"
          },
          "text4" : {
            "type" : "string",
            "description" : "The value of text4"
          },
          "text5" : {
            "type" : "string",
            "description" : "The value of text5"
          },
          "text6" : {
            "type" : "string",
            "description" : "The value of text6"
          },
          "text7" : {
            "type" : "string",
            "description" : "The value of text7"
          },
          "text8" : {
            "type" : "string",
            "description" : "The value of text8"
          },
          "text9" : {
            "type" : "string",
            "description" : "The value of text9"
          },
          "text10" : {
            "type" : "string",
            "description" : "The value of text10"
          },
          "character1" : {
            "type" : "string",
            "description" : "The value of char1"
          },
          "character2" : {
            "type" : "string",
            "description" : "The value of char2"
          },
          "character3" : {
            "type" : "string",
            "description" : "The value of char3"
          },
          "character4" : {
            "type" : "string",
            "description" : "The value of char4"
          },
          "character5" : {
            "type" : "string",
            "description" : "The value of char5"
          },
          "character6" : {
            "type" : "string",
            "description" : "The value of char6"
          },
          "character7" : {
            "type" : "string",
            "description" : "The value of char7"
          },
          "character8" : {
            "type" : "string",
            "description" : "The value of char8"
          },
          "character9" : {
            "type" : "string",
            "description" : "The value of char9"
          },
          "character10" : {
            "type" : "string",
            "description" : "The value of char10"
          },
          "date1" : {
            "type" : "string",
            "description" : "The value of date1",
            "format" : "date-time"
          },
          "date2" : {
            "type" : "string",
            "description" : "The value of date2",
            "format" : "date-time"
          },
          "date3" : {
            "type" : "string",
            "description" : "The value of date3",
            "format" : "date-time"
          },
          "date4" : {
            "type" : "string",
            "description" : "The value of date4",
            "format" : "date-time"
          },
          "date5" : {
            "type" : "string",
            "description" : "The value of date5",
            "format" : "date-time"
          },
          "date6" : {
            "type" : "string",
            "description" : "The value of date6",
            "format" : "date-time"
          },
          "date7" : {
            "type" : "string",
            "description" : "The value of date7",
            "format" : "date-time"
          },
          "date8" : {
            "type" : "string",
            "description" : "The value of date8",
            "format" : "date-time"
          },
          "date9" : {
            "type" : "string",
            "description" : "The value of date9",
            "format" : "date-time"
          },
          "date10" : {
            "type" : "string",
            "description" : "The value of date10",
            "format" : "date-time"
          },
          "number1" : {
            "type" : "integer",
            "description" : "The value of num1",
            "format" : "int32"
          },
          "number2" : {
            "type" : "integer",
            "description" : "The value of num2",
            "format" : "int32"
          },
          "number3" : {
            "type" : "integer",
            "description" : "The value of num3",
            "format" : "int32"
          },
          "number4" : {
            "type" : "integer",
            "description" : "The value of num4",
            "format" : "int32"
          },
          "number5" : {
            "type" : "integer",
            "description" : "The value of num5",
            "format" : "int32"
          },
          "number6" : {
            "type" : "integer",
            "description" : "The value of num6",
            "format" : "int32"
          },
          "number7" : {
            "type" : "integer",
            "description" : "The value of num7",
            "format" : "int32"
          },
          "number8" : {
            "type" : "integer",
            "description" : "The value of num8",
            "format" : "int32"
          },
          "number9" : {
            "type" : "integer",
            "description" : "The value of num9",
            "format" : "int32"
          },
          "number10" : {
            "type" : "integer",
            "description" : "The value of num10",
            "format" : "int32"
          },
          "decimal1" : {
            "type" : "number",
            "description" : "The value of dec1",
            "format" : "double"
          },
          "decimal2" : {
            "type" : "number",
            "description" : "The value of dec2",
            "format" : "double"
          },
          "decimal3" : {
            "type" : "number",
            "description" : "The value of dec3",
            "format" : "double"
          },
          "decimal4" : {
            "type" : "number",
            "description" : "The value of dec4",
            "format" : "double"
          },
          "decimal5" : {
            "type" : "number",
            "description" : "The value of dec5",
            "format" : "double"
          },
          "decimal6" : {
            "type" : "number",
            "description" : "The value of dec6",
            "format" : "double"
          },
          "decimal7" : {
            "type" : "number",
            "description" : "The value of dec7",
            "format" : "double"
          },
          "decimal8" : {
            "type" : "number",
            "description" : "The value of dec8",
            "format" : "double"
          },
          "decimal9" : {
            "type" : "number",
            "description" : "The value of dec9",
            "format" : "double"
          },
          "decimal10" : {
            "type" : "number",
            "description" : "The value of dec10",
            "format" : "double"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "PagedSurveyResponseDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SurveyResponseDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "PromptResponseDto" : {
        "required" : [ "time", "token", "value" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "token" : {
            "type" : "string",
            "description" : "String that uniquely identifies each prompt.",
            "example" : "WELLNESS_OK"
          },
          "value" : {
            "type" : "string",
            "description" : "Value of the employee's response to the prompt.",
            "example" : "Y"
          },
          "time" : {
            "type" : "string",
            "description" : "Time when the employee responded to this prompt. In UTC time.",
            "format" : "date-time"
          }
        },
        "description" : "Response to the prompts in the survey."
      },
      "SurveyResponseDto" : {
        "required" : [ "localizedName", "name", "promptResponses", "surveyStartTime" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the survey."
          },
          "localizedName" : {
            "type" : "string",
            "description" : "Localized title of the survey.",
            "example" : "Wellness Check"
          },
          "surveyStartTime" : {
            "type" : "string",
            "description" : "Time when the employee is presented with the first prompt.",
            "format" : "date-time"
          },
          "triggerCondition" : {
            "$ref" : "#/components/schemas/TriggerConditionDto"
          },
          "promptResponses" : {
            "type" : "array",
            "description" : "Response to the prompts in the survey.",
            "items" : {
              "$ref" : "#/components/schemas/PromptResponseDto"
            }
          }
        }
      },
      "TriggerConditionDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "time" : {
            "type" : "string",
            "description" : "Used to query surveys that are valid at the given time. In UTC time.",
            "format" : "date-time"
          },
          "projectName" : {
            "type" : "string",
            "description" : "Name of the project that surveys were requested for.",
            "example" : "PROJECT A"
          },
          "departmentName" : {
            "type" : "string",
            "description" : "Name of the department that surveys were requested for.",
            "example" : "DEPT A"
          },
          "docketName" : {
            "type" : "string",
            "description" : "Name of the docket that surveys were requested for.",
            "example" : "DOCKET A"
          },
          "jobName" : {
            "type" : "string",
            "description" : "Name of the job that surveys were requested for.",
            "example" : "JOB A"
          },
          "timeCodeName" : {
            "type" : "string",
            "description" : "Name of the time code that surveys were requested for.",
            "example" : "WRK"
          },
          "clockType" : {
            "type" : "string",
            "description" : "Clock type identifier to get surveys for. The types are \"01\" (ON), \"02\" (OFF), \"03\" (JOB), \"04\" (DOCKET), \"06\" (TIMECODE), \"07\" (DEPARTMENT), \"08\" (PROJECT) and \"11\" (DIRECTIONLESS)"
          }
        },
        "description" : "This should be the same set of trigger conditions that was sent to get the surveys."
      },
      "ChoiceDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "localizedLabel" : {
            "type" : "string",
            "description" : "Localization of the choice.",
            "example" : "Yes"
          },
          "value" : {
            "type" : "string",
            "description" : "Value to be submitted that indicates this choice was made.",
            "example" : "Y"
          },
          "fail" : {
            "type" : "boolean",
            "description" : "Does this choice indicate that the survey has been failed?",
            "example" : true
          },
          "nextToken" : {
            "type" : "string",
            "description" : "The token of the next prompt, if this choice is selected. If empty, the survey is complete.",
            "example" : "WELLNESS_CHECK_SYMP"
          }
        },
        "description" : "List of possible responses to the prompt, in the order that they should be displayed."
      },
      "PagedSurveyDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SurveyDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "PromptDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "localizedDescription" : {
            "type" : "string",
            "description" : "Localized content of the prompt to be displayed to the user.",
            "example" : "Are you experiencing COVID-19 symptoms?"
          },
          "token" : {
            "type" : "string",
            "description" : "String that uniquely identifies each prompt.",
            "example" : "WELLNESS_CHECK_CONFIRM"
          },
          "choices" : {
            "type" : "array",
            "description" : "List of possible responses to the prompt, in the order that they should be displayed.",
            "items" : {
              "$ref" : "#/components/schemas/ChoiceDto"
            }
          }
        },
        "description" : "List of the prompts in this survey. First prompt of the list should be displayed first."
      },
      "SurveyDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the survey."
          },
          "localizedName" : {
            "type" : "string",
            "description" : "Localized title of the survey.",
            "example" : "Wellness Check"
          },
          "prompts" : {
            "type" : "array",
            "description" : "List of the prompts in this survey. First prompt of the list should be displayed first.",
            "items" : {
              "$ref" : "#/components/schemas/PromptDto"
            }
          }
        }
      },
      "EmployeeClockStatusDto" : {
        "required" : [ "clockedIn" ],
        "type" : "object",
        "properties" : {
          "clockedIn" : {
            "type" : "boolean",
            "description" : "Flag indicating employee is clocked in or not; false if employee is not configured to use clocks",
            "readOnly" : true
          }
        },
        "description" : "Employee's clock status"
      },
      "PagedUdfDataDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UdfDataDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        },
        "description" : "Employee UDF object containing list of employee UDF data"
      },
      "UdfDataDto" : {
        "required" : [ "name", "value" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "UDF field name"
          },
          "value" : {
            "type" : "string",
            "description" : "UDF field value"
          }
        },
        "description" : "User defined data object"
      },
      "JsTaskDto" : {
        "required" : [ "description", "scheduled" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Identifies this object",
            "format" : "int64",
            "readOnly" : true
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the task"
          },
          "scheduled" : {
            "type" : "boolean",
            "description" : "A flag to indicate if the task is scheduled"
          },
          "nextRuntime" : {
            "type" : "string",
            "description" : "UTC time at which the task will be run next. It will be null if the task is not scheduled",
            "format" : "date-time"
          }
        }
      },
      "PagedResponseWithJsTaskDto" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JsTaskDto"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MetadataDto"
          }
        }
      },
      "JsTaskStatusDto" : {
        "required" : [ "taskId" ],
        "type" : "object",
        "properties" : {
          "taskId" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "nextRuntime" : {
            "type" : "string",
            "description" : "UTC time at which the task will be run next. It could be null if the task is not scheduled",
            "format" : "date-time"
          },
          "statusTime" : {
            "type" : "string",
            "description" : "UTC time at which the task status was updated last. It could be null if the task was not run before",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the last execution of this task. It could be null if the task was not run before",
            "enum" : [ "STARTED, ERROR, FAILED, FINISHED, INTERRUPTED, BLOCKED" ]
          }
        }
      },
      "JsTaskScheduleDto" : {
        "required" : [ "taskId" ],
        "type" : "object",
        "properties" : {
          "taskId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "securitySchemes" : {
      "OAuthToken" : {
        "type" : "apiKey",
        "name" : "Authorization",
        "in" : "header"
      }
    }
  }
}